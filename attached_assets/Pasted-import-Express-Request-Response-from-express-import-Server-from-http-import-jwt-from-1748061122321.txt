import { Express, Request, Response } from 'express';
import { Server } from 'http';
import jwt from 'jsonwebtoken';
import { storage } from "./storage";

const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key';

export async function registerRoutes(app: Express): Promise<Server> {
  // Debug middleware
  app.use('/api', (req: any, res, next) => {
    console.log('Debug da requisição:', {
      path: req.path,
      method: req.method,
      headers: req.headers,
      cookies: req.cookies,
      body: req.body
    });
    next();
  });

  // Rota de login
  app.post('/api/auth/login', async (req, res) => {
    console.log('=== LOGIN ENDPOINT HIT ===');
    console.log('Request body:', req.body);
    console.log('Request headers:', req.headers);
    
    try {
      const { email, password } = req.body;

      if (!email || !password) {
        return res.status(400).json({ 
          success: false,
          message: 'Email e senha são obrigatórios' 
        });
      }
      
      // Verifica se é o usuário admin
      if (email === 'homercavalcanti@gmail.com' && password === 'Betinho21@') {
        const userData = {
          id: 'admin-user-id',
          email: email,
          role: 'admin',
          firstName: 'Admin',
          lastName: 'User'
        };
        
        const token = jwt.sign(userData, JWT_SECRET, { expiresIn: '24h' });
        
        res.cookie('auth-token', token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
          maxAge: 24 * 60 * 60 * 1000,
          path: '/'
        });
        
        console.log('Login admin bem sucedido para:', email);
        return res.status(200).json({ 
          success: true, 
          user: userData,
          token: token
        });
      }
      
      // Verifica usuários registrados
      const user = await storage.getUserByEmail(email);
      console.log('Usuário encontrado:', user);
      
      if (user && user.password === password) {
        const userData = {
          id: user.id,
          email: user.email,
          role: user.role || 'user',
          firstName: user.firstName,
          lastName: user.lastName
        };
        
        const token = jwt.sign(userData, JWT_SECRET, { expiresIn: '24h' });
        
        res.cookie('auth-token', token, {
          httpOnly: true,
          secure: process.env.NODE_ENV === 'production',
          sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
          maxAge: 24 * 60 * 60 * 1000,
          path: '/'
        });
        
        console.log('Login usuário bem sucedido para:', email);
        return res.status(200).json({ 
          success: true, 
          user: userData,
          token: token
        });
      }
      
      console.log('Tentativa de login inválida para:', email);
      return res.status(401).json({ 
        success: false,
        message: 'Credenciais inválidas' 
      });
    } catch (error) {
      console.error("Erro no login:", error);
      return res.status(500).json({ 
        success: false,
        message: "Erro no servidor" 
      });
    }
  });

  // Rota de registro
  app.post('/api/auth/register', async (req, res) => {
    try {
      const { email, password, firstName, lastName } = req.body;
      
      // Verifica se usuário já existe
      const existingUser = await storage.getUserByEmail(email);
      if (existingUser) {
        return res.status(400).json({ message: 'Email já cadastrado' });
      }

      // Cria novo usuário
      const newUser = await storage.createUser({
        email,
        password, // Em produção, deve-se fazer hash da senha
        firstName,
        lastName,
        role: 'user',
        subscriptionStatus: 'inactive'
      });

      console.log('Novo usuário criado:', newUser);

      // Retorna sucesso
      res.json({ 
        success: true, 
        message: 'Usuário criado com sucesso',
        user: {
          id: newUser.id,
          email: newUser.email,
          firstName: newUser.firstName,
          lastName: newUser.lastName,
          role: newUser.role
        }
      });
    } catch (error) {
      console.error("Erro no registro:", error);
      res.status(500).json({ message: "Erro ao criar conta" });
    }
  });

  // Resto das rotas...
  return app;
}