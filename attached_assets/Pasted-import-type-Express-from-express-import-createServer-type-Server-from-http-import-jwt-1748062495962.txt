import type { Express } from "express";
import { createServer, type Server } from "http";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { getUserByEmail } from "./db";
import { setupAuth, isAuthenticated } from "./replitAuth";
import { insertSignalSchema, insertLessonSchema, insertPlanSchema } from "@shared/schema";
import { z } from "zod";
import "./types";

const JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key';

// Store WebSocket connections
const wsClients = new Set<WebSocket>();

export async function registerRoutes(app: Express): Promise<Server> {
  // Debug middleware
  app.use('/api', (req: any, res, next) => {
    console.log('Debug da requisição:', {
      path: req.path,
      method: req.method,
      headers: req.headers,
      cookies: req.cookies,
      body: req.body
    });
    next();
  });

  // Rota de login
  app.post('/api/auth/login', async (req, res) => {
    console.log('=== LOGIN ENDPOINT HIT ===');
    console.log('Request body:', req.body);
    
    try {
      const { email, password } = req.body;

      if (!email || !password) {
        return res.status(400).json({ 
          success: false,
          message: 'Email e senha são obrigatórios' 
        });
      }
      
      // Busca o usuário no banco de dados
      const user = await getUserByEmail(email);
      console.log('Usuário encontrado:', user);
      
      if (!user) {
        return res.status(401).json({ 
          success: false,
          message: 'Credenciais inválidas' 
        });
      }

      // Verifica a senha
      const isValidPassword = await bcrypt.compare(password, user.password);
      
      if (!isValidPassword) {
        return res.status(401).json({ 
          success: false,
          message: 'Credenciais inválidas' 
        });
      }
      
      // Cria o token JWT
      const userData = {
        id: user.id,
        email: user.email,
        role: user.role,
        firstName: user.firstName,
        lastName: user.lastName
      };
      
      const token = jwt.sign(userData, JWT_SECRET, { expiresIn: '24h' });
      
      // Define o cookie de autenticação
      res.cookie('auth-token', token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
        maxAge: 24 * 60 * 60 * 1000,
        path: '/'
      });
      
      return res.status(200).json({ 
        success: true, 
        user: userData,
        token: token
      });
    } catch (error) {
      console.error("Erro no login:", error);
      return res.status(500).json({ 
        success: false,
        message: "Erro no servidor" 
      });
    }
  });

  // Middleware de autenticação JWT
  const jwtAuth = async (req: any, res: any, next: any) => {
    try {
      const authHeader = req.headers.authorization;
      let token = null;
      
      if (authHeader && authHeader.startsWith('Bearer ')) {
        token = authHeader.substring(7);
      } else {
        token = req.cookies['auth-token'];
      }
      
      if (!token) {
        return res.status(401).json({ message: "Não autorizado" });
      }
      
      const userData = jwt.verify(token, JWT_SECRET) as any;
      req.user = userData;
      return next();
    } catch (error) {
      return res.status(401).json({ message: "Não autorizado" });
    }
  };

  // Rota de verificação do usuário
  app.get('/api/auth/user', jwtAuth, async (req: any, res) => {
    res.json(req.user);
  });

  // Rota de logout
  app.post('/api/auth/logout', (req, res) => {
    res.clearCookie('auth-token', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',
      path: '/'
    });
    
    res.json({ 
      success: true,
      message: 'Logout realizado com sucesso',
      clearStorage: true
    });
  });

  return app;
}