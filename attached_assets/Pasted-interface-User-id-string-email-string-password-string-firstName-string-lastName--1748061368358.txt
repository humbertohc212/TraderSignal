interface User {
  id: string;
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  role: 'admin' | 'user';
  subscriptionStatus: 'active' | 'inactive';
}

// Armazenamento em memória para desenvolvimento
// Em produção, isso seria substituído por um banco de dados
const users: User[] = [
  // Usuário inicial para teste
  {
    id: 'user-initial',
    email: 'alessandrabertoo2001@gmail.com',
    password: '1339Ale@',
    firstName: 'Alessandra',
    lastName: 'Berto',
    role: 'user',
    subscriptionStatus: 'inactive'
  }
];

export const storage = {
  async getUserByEmail(email: string): Promise<User | null> {
    console.log('=== PROCURANDO USUÁRIO ===');
    console.log('Email procurado:', email);
    console.log('Usuários cadastrados:', JSON.stringify(users, null, 2));
    
    const user = users.find(user => user.email.toLowerCase() === email.toLowerCase());
    console.log('Usuário encontrado:', user || 'Nenhum');
    
    return user || null;
  },

  async createUser(userData: Omit<User, 'id'>): Promise<User> {
    console.log('=== CRIANDO NOVO USUÁRIO ===');
    console.log('Dados recebidos:', userData);
    
    const newUser: User = {
      ...userData,
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };
    
    users.push(newUser);
    console.log('Novo usuário adicionado:', newUser);
    console.log('Lista atualizada de usuários:', JSON.stringify(users, null, 2));
    
    return newUser;
  },

  async updateUser(id: string, updates: Partial<User>): Promise<User | null> {
    console.log('=== ATUALIZANDO USUÁRIO ===');
    console.log('ID:', id);
    console.log('Atualizações:', updates);
    
    const index = users.findIndex(user => user.id === id);
    if (index === -1) {
      console.log('Usuário não encontrado');
      return null;
    }
    
    users[index] = { ...users[index], ...updates };
    console.log('Usuário atualizado:', users[index]);
    
    return users[index];
  },

  async deleteUser(id: string): Promise<boolean> {
    console.log('=== DELETANDO USUÁRIO ===');
    console.log('ID:', id);
    
    const index = users.findIndex(user => user.id === id);
    if (index === -1) {
      console.log('Usuário não encontrado');
      return false;
    }
    
    users.splice(index, 1);
    console.log('Usuário deletado com sucesso');
    console.log('Lista atualizada de usuários:', JSON.stringify(users, null, 2));
    
    return true;
  }
};